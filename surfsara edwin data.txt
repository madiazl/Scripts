#we define the folder WRI as the WD because in there is stored the function netcdf_funcs.py
import os
os.chdir(r'/home/adiaz/IWC')
# Autogenerated with SMOP version 
# main.py func_indicator_11_FUTURE_SCENARIOS.m
from netcdf_funcs import *
import numpy as np
import netCDF4 as nc
from osgeo import gdal
import datetime

gdal.AllRegister()





#the file
inun_file = nc.Dataset(r'/home/adiaz/edwin/inunriver_historical_watch_1960-1999.nc', 'r', format='netCDF4');

#extracting the variable
inun_file_variable=inun_file.variables['5-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00005.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['10-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00010.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['25-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00025.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['50-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00050.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['100-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00100.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['250-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00250.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['500-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_00500.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()

#extracting the variable
inun_file_variable=inun_file.variables['1000-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=inun_file_variable[0,:,:]
inun_file_variable[inun_file_variable>=100000]=-9999
exa=inun_file_variable[:,:]*100
exa=exa.astype(int)
exa=np.array(exa)

# create metadata 
metadata_global = {}
metadata_global['config_file'] = 'Rasetr of depth of EUWATCH new riverine reanlisys'
metadata_global['history']='Raster obtained from Edwin feb. 2017'
metadata_var = {'units': 'm','standard_name': 'water_level_masked','long_name': 'water_level_masked','comment': 'Inundation depth of GLOFRIS'} #name invented where to put all the information (money at 2005 year)
x = np.linspace(-180+1./240, 180-1./240, 43200)
y = np.linspace(-90+1./240, 90-1./240, 21600)
time_list = [datetime.datetime(2016, 1, 1, 0, 0)]

filename='/home/adiaz/edwin/new/inun_historical_RP_01000.nc'
prepare_nc(filename, x, y, time_list,100, metadata_global)
append_nc(filename, 'water_level_masked', fill_value=-9999, metadata=metadata_var) #
# now store the data in this variable in the first time instance
a = nc.Dataset(filename, 'a')
var = a.variables['water_level_masked']
var.set_auto_maskandscale(False)
var[:,:] = exa[:,:]
a.sync()
a.close()










inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00005.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file_variable2[positions[0]][positions[1]]=inun_list[:][:]
inun_file_variable2[positions[0]][positions[1]]=inun_file_variable[0][positions[0]][positions[1]]
inun_file2.close()

inun_file_variable=inun_file.variables['10-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_list=np.extract(condition,inun_file_variable[0,:,:])
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00010.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()

inun_file_variable=inun_file.variables['25-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00025.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()


inun_file_variable=inun_file.variables['50-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00050.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()

inun_file_variable=inun_file.variables['100-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00100.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()

inun_file_variable=inun_file.variables['250-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00250.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()

inun_file_variable=inun_file.variables['500-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_00500.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()

inun_file_variable=inun_file.variables['1000-year_of_inundation_depth']
inun_file_variable.set_auto_maskandscale(False)
inun_file2 = nc.Dataset(r'/home/adiaz/edwin/inun_historical_RP_01000.nc', 'a', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2[:][:]=inun_file_variable[0,:,:]
inun_file2.close()


#__________________________________________________________________________________________________
import os
os.chdir(r'C:\Glofris')
# Autogenerated with SMOP version 
# main.py func_indicator_11_FUTURE_SCENARIOS.m
import numpy as np
import netCDF4 as nc
from osgeo import gdal


#loading Geogunit 2
geogunits=nc.Dataset(r'C:\Glofris\WRI\geogunit_2.h5', 'r', format='h5');
data=geogunits.variables['data']
data.set_auto_maskandscale(False)
#data=np.array(data)
#data=data.T
# SELECTING THE CELLS OF germany code: DEU number 85

#_______________________________________________________________________________________________RP5
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_00005.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00005.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0005.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP10
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_00010.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00010.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0010.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP25
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_00025.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00025.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0025.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP50
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_00050.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00050.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0050.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP100
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_00100.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00100.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0100.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP250
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_00250.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00250.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0250.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP5
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_0050.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_00500.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP0500.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP1000
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_01000.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)
positions=np.where(inun_file_variable==-9999)
inun_file_variable[positions[0][:]][positions[0][:]]=0

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_01000.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
positions2=np.where(inun_file_variable2==-9999)
inun_file_variable2[positions2[0][:]][positions2[0][:]]=0


Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_SUM']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_SUM])))
np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP1000.txt',(Table),delimiter='\t',fmt='%s')

#________________________________________________________________________________________________
import os
os.chdir(r'/home/madiazl/')
# Autogenerated with SMOP version
# main.py func_indicator_11_FUTURE_SCENARIOS.m
import numpy as np
import netCDF4 as nc
#from osgeo import gdal


geogunits=nc.Dataset(r'/home/madiazl/IWC/geogunit_2.h5', 'r', format='h5');
data=geogunits.variables['data']
data.set_auto_maskandscale(False)

#loading the old hazard .nc files
inun_file = nc.Dataset(r'/home/madiazl/IWC/EU-WATCH/inun_dynRout_RP_01000.nc','r',format='netCDF4')
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=np.array(inun_file_variable)
inun_file_variable[inun_file_variable[:,:]==-9999]=0

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'/home/madiazl/edwin/inun_historical_RP_01000.nc','r',format='netCDF4')
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
if (file.variables['lat'][0]<0): 
	variable=variable[::-1] 
inun_file_variable2=np.array(inun_file_variable2)
inun_file_variable2[inun_file_variable2[:,:]==-9999]=0

Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_MEAN','Number_Cells_Old','Number_Cells_New']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        numbercells_OHM = len(Hazard_cells_old[Hazard_cells_old[:]>0])
        numbercells_NHM = len(Hazard_cells_new[Hazard_cells_new[:]>0])
        print (numbercells_OHM)
        print (numbercells_NHM)
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_MEAN,numbercells_OHM,numbercells_NHM])))
        print Table

np.savetxt(r'/home/madiazl/FloodStat_RP0005.txt',(Table),delimiter='\t',fmt='%s')

#_______________________________________________________________________________________________RP1000
#loading the old hazard .nc files
inun_file = nc.Dataset(r'C:\Glofris\WRI\inun_dynRout_RP_01000.nc', 'r', format='netCDF4');
inun_file_variable=inun_file.variables['water_level_masked']
inun_file_variable.set_auto_maskandscale(False)
inun_file_variable=np.array(inun_file_variable)
inun_file_variable[inun_file_variable[:,:]==-9999]=0

#loading the new hazard .nc files
inun_file2 = nc.Dataset(r'C:\Glofris\edwin\inun_historical_RP_01000.nc', 'r', format='netCDF4');
inun_file_variable2=inun_file2.variables['water_level_masked']
inun_file_variable2.set_auto_maskandscale(False)
inun_file_variable2=np.array(inun_file_variable2)
inun_file_variable2[inun_file_variable2[:,:]==-9999]=0

Table = np.array([['FID','OHM_SUM','NHM_SUM','OHM_MEAN','NHM_MEAN','Number_Cells_Old','Number_Cells_New']])
for i in range(0,253):
        print(i)
        #cell_condition = np.where(data[:][:]==i)
        cell_condition = (data[:][:]==i)
        Hazard_cells_old = np.extract(cell_condition,inun_file_variable[:][:])
        Hazard_cells_new = np.extract(cell_condition,inun_file_variable2[:][:])
        numbercells_OHM = len(Hazard_cells_old[Hazard_cells_old[:]>0])
        print numbercells_OHM
        numbercells_NHM = len(Hazard_cells_new[Hazard_cells_new[:]>0])
        OHM_SUM=np.nansum(Hazard_cells_old)
        NHM_SUM=np.nansum(Hazard_cells_new)
        OHM_MEAN=np.nanmean(Hazard_cells_old)
        NHM_MEAN=np.nanmean(Hazard_cells_new)
        Table=np.vstack((Table, np.array([i,OHM_SUM,NHM_SUM,OHM_MEAN,NHM_MEAN,numbercells_OHM,numbercells_NHM])))
        print Table


np.savetxt(r'C:\Glofris\MeetingApril2017\FloodStat_RP1000.txt',(Table),delimiter='\t',fmt='%s')


41979864 EU
456470493

38372274


